<<<<<<< HEAD
#!/usr/bin/env python3
"""
üìÑ Creador de PDF de Ejemplo

Script para crear un PDF de ejemplo para probar el cargador de documentos.
"""

import os
from pathlib import Path

try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
except ImportError:
    print("üì¶ Instalando reportlab...")
    os.system("pip install reportlab")
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle


def crear_pdf_ejemplo():
    """Crear un PDF de ejemplo con contenido sobre IA"""
    
    # Crear directorio si no existe
    uploads_dir = Path("data/uploads")
    uploads_dir.mkdir(parents=True, exist_ok=True)
    
    pdf_path = uploads_dir / "documento_ejemplo_ia.pdf"
    
    # Crear el documento
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Contenido del documento
    story = []
    
    # T√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,  # Centrado
        textColor=colors.darkblue
    )
    
    story.append(Paragraph("Inteligencia Artificial: Fundamentos y Aplicaciones", title_style))
    story.append(Spacer(1, 20))
    
    # Introducci√≥n
    intro_text = """
    La Inteligencia Artificial (IA) es una rama de la inform√°tica que busca crear sistemas capaces de realizar tareas que normalmente requieren inteligencia humana. 
    Estos sistemas pueden aprender, razonar, percibir y resolver problemas complejos.
    """
    story.append(Paragraph(intro_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 1: Tipos de IA
    story.append(Paragraph("Tipos de Inteligencia Artificial", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    tipos_text = """
    <b>1. IA D√©bil (Narrow AI):</b> Dise√±ada para realizar tareas espec√≠ficas como reconocimiento de voz, 
    recomendaciones de productos o diagn√≥stico m√©dico.<br/><br/>
    
    <b>2. IA General (AGI):</b> Inteligencia artificial que puede realizar cualquier tarea intelectual 
    que un ser humano puede hacer.<br/><br/>
    
    <b>3. IA Superinteligente:</b> IA que supera la inteligencia humana en todos los aspectos.
    """
    story.append(Paragraph(tipos_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 2: Aplicaciones
    story.append(Paragraph("Aplicaciones de la IA", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    aplicaciones_text = """
    <b>‚Ä¢ Medicina:</b> Diagn√≥stico de enfermedades, an√°lisis de im√°genes m√©dicas, desarrollo de f√°rmacos.<br/><br/>
    
    <b>‚Ä¢ Finanzas:</b> Detecci√≥n de fraudes, trading algor√≠tmico, evaluaci√≥n de riesgos.<br/><br/>
    
    <b>‚Ä¢ Transporte:</b> Veh√≠culos aut√≥nomos, optimizaci√≥n de rutas, gesti√≥n del tr√°fico.<br/><br/>
    
    <b>‚Ä¢ Educaci√≥n:</b> Tutores personalizados, evaluaci√≥n autom√°tica, contenido adaptativo.<br/><br/>
    
    <b>‚Ä¢ Entretenimiento:</b> Recomendaciones de contenido, generaci√≥n de m√∫sica y arte.
    """
    story.append(Paragraph(aplicaciones_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 3: Tecnolog√≠as
    story.append(Paragraph("Tecnolog√≠as Clave", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    tecnologias_text = """
    <b>Machine Learning:</b> Algoritmos que permiten a las computadoras aprender sin ser programadas expl√≠citamente.<br/><br/>
    
    <b>Deep Learning:</b> Subconjunto del machine learning basado en redes neuronales artificiales.<br/><br/>
    
    <b>Procesamiento de Lenguaje Natural:</b> Permite a las computadoras entender e interpretar el lenguaje humano.<br/><br/>
    
    <b>Computer Vision:</b> Capacidad de las m√°quinas para interpretar y analizar informaci√≥n visual.
    """
    story.append(Paragraph(tecnologias_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 4: Desaf√≠os
    story.append(Paragraph("Desaf√≠os y Consideraciones √âticas", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    desafios_text = """
    <b>‚Ä¢ Sesgo y Equidad:</b> Los sistemas de IA pueden perpetuar sesgos existentes en los datos de entrenamiento.<br/><br/>
    
    <b>‚Ä¢ Privacidad:</b> La IA requiere grandes cantidades de datos, lo que plantea preocupaciones sobre la privacidad.<br/><br/>
    
    <b>‚Ä¢ Transparencia:</b> Muchos sistemas de IA son "cajas negras" dif√≠ciles de interpretar.<br/><br/>
    
    <b>‚Ä¢ Empleo:</b> La automatizaci√≥n puede desplazar trabajos tradicionales.<br/><br/>
    
    <b>‚Ä¢ Seguridad:</b> Los sistemas de IA pueden ser vulnerables a ataques maliciosos.
    """
    story.append(Paragraph(desafios_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Conclusi√≥n
    story.append(Paragraph("Conclusi√≥n", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    conclusion_text = """
    La Inteligencia Artificial representa una de las tecnolog√≠as m√°s transformadoras de nuestro tiempo. 
    Aunque presenta desaf√≠os significativos, su potencial para mejorar la calidad de vida humana es enorme. 
    Es fundamental desarrollar la IA de manera responsable, considerando los aspectos √©ticos y sociales.
    """
    story.append(Paragraph(conclusion_text, styles['Normal']))
    
    # Construir el PDF
    doc.build(story)
    
    print(f"‚úÖ PDF de ejemplo creado: {pdf_path}")
    print(f"üìÑ Contenido: Documento sobre Inteligencia Artificial")
    print(f"üìä P√°ginas: Aproximadamente 2-3 p√°ginas")
    
    return pdf_path


def crear_pdf_tecnico():
    """Crear un PDF t√©cnico sobre LangGraph"""
    
    uploads_dir = Path("data/uploads")
    uploads_dir.mkdir(parents=True, exist_ok=True)
    
    pdf_path = uploads_dir / "langgraph_tecnico.pdf"
    
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    story = []
    
    # T√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,
        textColor=colors.darkgreen
    )
    
    story.append(Paragraph("LangGraph: Construyendo Agentes de IA Complejos", title_style))
    story.append(Spacer(1, 20))
    
    # Introducci√≥n
    intro_text = """
    LangGraph es una biblioteca de Python que permite construir agentes de IA complejos y sistemas de flujo de trabajo 
    utilizando grafos de estado. Es especialmente √∫til para crear aplicaciones de IA que requieren m√∫ltiples pasos 
    de razonamiento y coordinaci√≥n entre diferentes componentes.
    """
    story.append(Paragraph(intro_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Caracter√≠sticas principales
    story.append(Paragraph("Caracter√≠sticas Principales", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    features_text = """
    <b>‚Ä¢ Grafos de Estado:</b> Permite modelar flujos de trabajo complejos como grafos dirigidos.<br/><br/>
    
    <b>‚Ä¢ Coordinaci√≥n de Agentes:</b> Facilita la comunicaci√≥n y coordinaci√≥n entre m√∫ltiples agentes de IA.<br/><br/>
    
    <b>‚Ä¢ Persistencia de Estado:</b> Mantiene el estado del flujo de trabajo entre ejecuciones.<br/><br/>
    
    <b>‚Ä¢ Integraci√≥n con LangChain:</b> Se integra perfectamente con el ecosistema de LangChain.<br/><br/>
    
    <b>‚Ä¢ Escalabilidad:</b> Permite construir sistemas distribuidos y escalables.
    """
    story.append(Paragraph(features_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Casos de uso
    story.append(Paragraph("Casos de Uso Comunes", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    casos_text = """
    <b>‚Ä¢ Asistentes Conversacionales:</b> Agentes que mantienen contexto y pueden realizar m√∫ltiples tareas.<br/><br/>
    
    <b>‚Ä¢ Sistemas de Investigaci√≥n:</b> Automatizaci√≥n de procesos de investigaci√≥n y an√°lisis.<br/><br/>
    
    <b>‚Ä¢ Flujos de Trabajo Empresariales:</b> Automatizaci√≥n de procesos complejos de negocio.<br/><br/>
    
    <b>‚Ä¢ An√°lisis de Datos:</b> Pipelines de procesamiento y an√°lisis de datos.<br/><br/>
    
    <b>‚Ä¢ Generaci√≥n de Contenido:</b> Sistemas que generan contenido en m√∫ltiples pasos.
    """
    story.append(Paragraph(casos_text, styles['Normal']))
    
    doc.build(story)
    
    print(f"‚úÖ PDF t√©cnico creado: {pdf_path}")
    print(f"üìÑ Contenido: Documento t√©cnico sobre LangGraph")
    
    return pdf_path


def main():
    """Funci√≥n principal"""
    print("üìÑ CREANDO PDFs DE EJEMPLO")
    print("=" * 40)
    
    # Crear PDFs de ejemplo
    pdf1 = crear_pdf_ejemplo()
    pdf2 = crear_pdf_tecnico()
    
    print(f"\n‚úÖ PDFs creados exitosamente:")
    print(f"   üìÑ {pdf1.name}")
    print(f"   üìÑ {pdf2.name}")
    
    print(f"\nüí° Ahora puedes ejecutar:")
    print(f"   python cargar_pdf_simple.py")
    print(f"   para cargar estos documentos a la base de datos")


if __name__ == "__main__":
=======
#!/usr/bin/env python3
"""
üìÑ Creador de PDF de Ejemplo

Script para crear un PDF de ejemplo para probar el cargador de documentos.
"""

import os
from pathlib import Path

try:
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
except ImportError:
    print("üì¶ Instalando reportlab...")
    os.system("pip install reportlab")
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle


def crear_pdf_ejemplo():
    """Crear un PDF de ejemplo con contenido sobre IA"""
    
    # Crear directorio si no existe
    uploads_dir = Path("data/uploads")
    uploads_dir.mkdir(parents=True, exist_ok=True)
    
    pdf_path = uploads_dir / "documento_ejemplo_ia.pdf"
    
    # Crear el documento
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Contenido del documento
    story = []
    
    # T√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,  # Centrado
        textColor=colors.darkblue
    )
    
    story.append(Paragraph("Inteligencia Artificial: Fundamentos y Aplicaciones", title_style))
    story.append(Spacer(1, 20))
    
    # Introducci√≥n
    intro_text = """
    La Inteligencia Artificial (IA) es una rama de la inform√°tica que busca crear sistemas capaces de realizar tareas que normalmente requieren inteligencia humana. 
    Estos sistemas pueden aprender, razonar, percibir y resolver problemas complejos.
    """
    story.append(Paragraph(intro_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 1: Tipos de IA
    story.append(Paragraph("Tipos de Inteligencia Artificial", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    tipos_text = """
    <b>1. IA D√©bil (Narrow AI):</b> Dise√±ada para realizar tareas espec√≠ficas como reconocimiento de voz, 
    recomendaciones de productos o diagn√≥stico m√©dico.<br/><br/>
    
    <b>2. IA General (AGI):</b> Inteligencia artificial que puede realizar cualquier tarea intelectual 
    que un ser humano puede hacer.<br/><br/>
    
    <b>3. IA Superinteligente:</b> IA que supera la inteligencia humana en todos los aspectos.
    """
    story.append(Paragraph(tipos_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 2: Aplicaciones
    story.append(Paragraph("Aplicaciones de la IA", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    aplicaciones_text = """
    <b>‚Ä¢ Medicina:</b> Diagn√≥stico de enfermedades, an√°lisis de im√°genes m√©dicas, desarrollo de f√°rmacos.<br/><br/>
    
    <b>‚Ä¢ Finanzas:</b> Detecci√≥n de fraudes, trading algor√≠tmico, evaluaci√≥n de riesgos.<br/><br/>
    
    <b>‚Ä¢ Transporte:</b> Veh√≠culos aut√≥nomos, optimizaci√≥n de rutas, gesti√≥n del tr√°fico.<br/><br/>
    
    <b>‚Ä¢ Educaci√≥n:</b> Tutores personalizados, evaluaci√≥n autom√°tica, contenido adaptativo.<br/><br/>
    
    <b>‚Ä¢ Entretenimiento:</b> Recomendaciones de contenido, generaci√≥n de m√∫sica y arte.
    """
    story.append(Paragraph(aplicaciones_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 3: Tecnolog√≠as
    story.append(Paragraph("Tecnolog√≠as Clave", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    tecnologias_text = """
    <b>Machine Learning:</b> Algoritmos que permiten a las computadoras aprender sin ser programadas expl√≠citamente.<br/><br/>
    
    <b>Deep Learning:</b> Subconjunto del machine learning basado en redes neuronales artificiales.<br/><br/>
    
    <b>Procesamiento de Lenguaje Natural:</b> Permite a las computadoras entender e interpretar el lenguaje humano.<br/><br/>
    
    <b>Computer Vision:</b> Capacidad de las m√°quinas para interpretar y analizar informaci√≥n visual.
    """
    story.append(Paragraph(tecnologias_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Secci√≥n 4: Desaf√≠os
    story.append(Paragraph("Desaf√≠os y Consideraciones √âticas", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    desafios_text = """
    <b>‚Ä¢ Sesgo y Equidad:</b> Los sistemas de IA pueden perpetuar sesgos existentes en los datos de entrenamiento.<br/><br/>
    
    <b>‚Ä¢ Privacidad:</b> La IA requiere grandes cantidades de datos, lo que plantea preocupaciones sobre la privacidad.<br/><br/>
    
    <b>‚Ä¢ Transparencia:</b> Muchos sistemas de IA son "cajas negras" dif√≠ciles de interpretar.<br/><br/>
    
    <b>‚Ä¢ Empleo:</b> La automatizaci√≥n puede desplazar trabajos tradicionales.<br/><br/>
    
    <b>‚Ä¢ Seguridad:</b> Los sistemas de IA pueden ser vulnerables a ataques maliciosos.
    """
    story.append(Paragraph(desafios_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Conclusi√≥n
    story.append(Paragraph("Conclusi√≥n", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    conclusion_text = """
    La Inteligencia Artificial representa una de las tecnolog√≠as m√°s transformadoras de nuestro tiempo. 
    Aunque presenta desaf√≠os significativos, su potencial para mejorar la calidad de vida humana es enorme. 
    Es fundamental desarrollar la IA de manera responsable, considerando los aspectos √©ticos y sociales.
    """
    story.append(Paragraph(conclusion_text, styles['Normal']))
    
    # Construir el PDF
    doc.build(story)
    
    print(f"‚úÖ PDF de ejemplo creado: {pdf_path}")
    print(f"üìÑ Contenido: Documento sobre Inteligencia Artificial")
    print(f"üìä P√°ginas: Aproximadamente 2-3 p√°ginas")
    
    return pdf_path


def crear_pdf_tecnico():
    """Crear un PDF t√©cnico sobre LangGraph"""
    
    uploads_dir = Path("data/uploads")
    uploads_dir.mkdir(parents=True, exist_ok=True)
    
    pdf_path = uploads_dir / "langgraph_tecnico.pdf"
    
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    story = []
    
    # T√≠tulo
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=24,
        spaceAfter=30,
        alignment=1,
        textColor=colors.darkgreen
    )
    
    story.append(Paragraph("LangGraph: Construyendo Agentes de IA Complejos", title_style))
    story.append(Spacer(1, 20))
    
    # Introducci√≥n
    intro_text = """
    LangGraph es una biblioteca de Python que permite construir agentes de IA complejos y sistemas de flujo de trabajo 
    utilizando grafos de estado. Es especialmente √∫til para crear aplicaciones de IA que requieren m√∫ltiples pasos 
    de razonamiento y coordinaci√≥n entre diferentes componentes.
    """
    story.append(Paragraph(intro_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Caracter√≠sticas principales
    story.append(Paragraph("Caracter√≠sticas Principales", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    features_text = """
    <b>‚Ä¢ Grafos de Estado:</b> Permite modelar flujos de trabajo complejos como grafos dirigidos.<br/><br/>
    
    <b>‚Ä¢ Coordinaci√≥n de Agentes:</b> Facilita la comunicaci√≥n y coordinaci√≥n entre m√∫ltiples agentes de IA.<br/><br/>
    
    <b>‚Ä¢ Persistencia de Estado:</b> Mantiene el estado del flujo de trabajo entre ejecuciones.<br/><br/>
    
    <b>‚Ä¢ Integraci√≥n con LangChain:</b> Se integra perfectamente con el ecosistema de LangChain.<br/><br/>
    
    <b>‚Ä¢ Escalabilidad:</b> Permite construir sistemas distribuidos y escalables.
    """
    story.append(Paragraph(features_text, styles['Normal']))
    story.append(Spacer(1, 20))
    
    # Casos de uso
    story.append(Paragraph("Casos de Uso Comunes", styles['Heading2']))
    story.append(Spacer(1, 12))
    
    casos_text = """
    <b>‚Ä¢ Asistentes Conversacionales:</b> Agentes que mantienen contexto y pueden realizar m√∫ltiples tareas.<br/><br/>
    
    <b>‚Ä¢ Sistemas de Investigaci√≥n:</b> Automatizaci√≥n de procesos de investigaci√≥n y an√°lisis.<br/><br/>
    
    <b>‚Ä¢ Flujos de Trabajo Empresariales:</b> Automatizaci√≥n de procesos complejos de negocio.<br/><br/>
    
    <b>‚Ä¢ An√°lisis de Datos:</b> Pipelines de procesamiento y an√°lisis de datos.<br/><br/>
    
    <b>‚Ä¢ Generaci√≥n de Contenido:</b> Sistemas que generan contenido en m√∫ltiples pasos.
    """
    story.append(Paragraph(casos_text, styles['Normal']))
    
    doc.build(story)
    
    print(f"‚úÖ PDF t√©cnico creado: {pdf_path}")
    print(f"üìÑ Contenido: Documento t√©cnico sobre LangGraph")
    
    return pdf_path


def main():
    """Funci√≥n principal"""
    print("üìÑ CREANDO PDFs DE EJEMPLO")
    print("=" * 40)
    
    # Crear PDFs de ejemplo
    pdf1 = crear_pdf_ejemplo()
    pdf2 = crear_pdf_tecnico()
    
    print(f"\n‚úÖ PDFs creados exitosamente:")
    print(f"   üìÑ {pdf1.name}")
    print(f"   üìÑ {pdf2.name}")
    
    print(f"\nüí° Ahora puedes ejecutar:")
    print(f"   python cargar_pdf_simple.py")
    print(f"   para cargar estos documentos a la base de datos")


if __name__ == "__main__":
>>>>>>> 4caeba3865603c67c51ab60f71b04353770ceb47
    main() 