#!/usr/bin/env python3
"""
üöÇ Railway Setup - Configuraci√≥n para Despliegue en Railway

Este script configura el proyecto para despliegue en Railway,
verificando dependencias y configurando el entorno.
"""

import os
import sys
import subprocess
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RailwaySetup:
    """Configurador para Railway"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.requirements_file = self.project_root / "requirements.txt"
        self.railway_app_file = self.project_root / "railway_app.py"
        
    def check_railway_environment(self):
        """Verificar si estamos en Railway"""
        railway_vars = [
            "RAILWAY_ENVIRONMENT",
            "RAILWAY_PROJECT_ID",
            "RAILWAY_SERVICE_ID"
        ]
        
        in_railway = any(os.environ.get(var) for var in railway_vars)
        
        if in_railway:
            logger.info("üöÇ Detectado entorno Railway")
            logger.info(f"   Entorno: {os.environ.get('RAILWAY_ENVIRONMENT', 'unknown')}")
            logger.info(f"   Puerto: {os.environ.get('PORT', '8000')}")
        else:
            logger.info("üíª Entorno local detectado")
        
        return in_railway
    
    def verify_dependencies(self):
        """Verificar dependencias cr√≠ticas"""
        logger.info("üîç Verificando dependencias...")
        
        critical_deps = [
            "fastapi",
            "uvicorn",
            "pydantic",
            "openai",
            "langchain"
        ]
        
        missing_deps = []
        
        for dep in critical_deps:
            try:
                __import__(dep.replace("-", "_"))
                logger.info(f"‚úÖ {dep}")
            except ImportError:
                missing_deps.append(dep)
                logger.warning(f"‚ùå {dep} - No encontrado")
        
        if missing_deps:
            logger.error(f"‚ùå Dependencias faltantes: {missing_deps}")
            return False
        
        logger.info("‚úÖ Todas las dependencias cr√≠ticas est√°n disponibles")
        return True
    
    def check_files(self):
        """Verificar archivos necesarios"""
        logger.info("üìÅ Verificando archivos...")
        
        required_files = [
            "railway_app.py",
            "requirements.txt",
            "Procfile",
            "runtime.txt"
        ]
        
        missing_files = []
        
        for file_name in required_files:
            file_path = self.project_root / file_name
            if file_path.exists():
                logger.info(f"‚úÖ {file_name}")
            else:
                missing_files.append(file_name)
                logger.warning(f"‚ùå {file_name} - No encontrado")
        
        if missing_files:
            logger.error(f"‚ùå Archivos faltantes: {missing_files}")
            return False
        
        logger.info("‚úÖ Todos los archivos necesarios est√°n presentes")
        return True
    
    def create_directories(self):
        """Crear directorios necesarios"""
        logger.info("üìÇ Creando directorios...")
        
        directories = [
            "data",
            "data/temp",
            "data/uploads",
            "data/database",
            "data/logs",
            "static",
            "templates"
        ]
        
        for dir_name in directories:
            dir_path = self.project_root / dir_name
            dir_path.mkdir(parents=True, exist_ok=True)
            logger.info(f"‚úÖ {dir_name}")
    
    def check_environment_variables(self):
        """Verificar variables de entorno"""
        logger.info("üîß Verificando variables de entorno...")
        
        # Variables cr√≠ticas
        critical_vars = ["OPENAI_API_KEY"]
        
        missing_vars = []
        
        for var in critical_vars:
            if os.environ.get(var):
                logger.info(f"‚úÖ {var} - Configurada")
            else:
                missing_vars.append(var)
                logger.warning(f"‚ö†Ô∏è {var} - No configurada")
        
        # Variables opcionales
        optional_vars = [
            "DATABASE_URL",
            "GOOGLE_VISION_API_KEY",
            "AZURE_VISION_ENDPOINT",
            "WEATHER_API_KEY",
            "NEWS_API_KEY"
        ]
        
        for var in optional_vars:
            if os.environ.get(var):
                logger.info(f"‚úÖ {var} - Configurada")
            else:
                logger.info(f"‚ÑπÔ∏è {var} - No configurada (opcional)")
        
        if missing_vars:
            logger.warning(f"‚ö†Ô∏è Variables cr√≠ticas faltantes: {missing_vars}")
            logger.warning("   El sistema funcionar√° con capacidades limitadas")
        
        return len(missing_vars) == 0
    
    def test_imports(self):
        """Probar imports cr√≠ticos"""
        logger.info("üß™ Probando imports...")
        
        try:
            # Test b√°sico
            import fastapi
            import uvicorn
            logger.info("‚úÖ FastAPI y Uvicorn")
            
            # Test del sistema
            from agent.core.config import get_config
            logger.info("‚úÖ Configuraci√≥n del agente")
            
            # Test opcional
            try:
                from assistant_multimodal import MultimodalAssistant
                logger.info("‚úÖ Asistente multimodal")
            except ImportError:
                logger.info("‚ÑπÔ∏è Asistente multimodal - No disponible")
            
            logger.info("‚úÖ Todos los imports cr√≠ticos funcionan")
            return True
            
        except ImportError as e:
            logger.error(f"‚ùå Error en imports: {e}")
            return False
    
    def run_setup(self):
        """Ejecutar configuraci√≥n completa"""
        logger.info("üöÄ Iniciando configuraci√≥n de Railway...")
        
        # Verificar entorno
        in_railway = self.check_railway_environment()
        
        # Verificar archivos
        if not self.check_files():
            logger.error("‚ùå Configuraci√≥n fallida: Archivos faltantes")
            return False
        
        # Verificar dependencias
        if not self.verify_dependencies():
            logger.error("‚ùå Configuraci√≥n fallida: Dependencias faltantes")
            return False
        
        # Crear directorios
        self.create_directories()
        
        # Verificar variables de entorno
        env_ok = self.check_environment_variables()
        
        # Probar imports
        if not self.test_imports():
            logger.error("‚ùå Configuraci√≥n fallida: Errores en imports")
            return False
        
        # Resumen
        logger.info("=" * 50)
        logger.info("üìä RESUMEN DE CONFIGURACI√ìN")
        logger.info("=" * 50)
        logger.info(f"üöÇ Entorno Railway: {'‚úÖ' if in_railway else '‚ùå'}")
        logger.info(f"üìÅ Archivos: ‚úÖ")
        logger.info(f"üì¶ Dependencias: ‚úÖ")
        logger.info(f"üîß Variables de entorno: {'‚úÖ' if env_ok else '‚ö†Ô∏è'}")
        logger.info(f"üß™ Imports: ‚úÖ")
        
        if in_railway:
            logger.info("üéâ ¬°Configuraci√≥n completada! El proyecto est√° listo para Railway")
        else:
            logger.info("üéâ ¬°Configuraci√≥n completada! El proyecto est√° listo para desarrollo local")
        
        return True

def main():
    """Funci√≥n principal"""
    setup = RailwaySetup()
    
    try:
        success = setup.run_setup()
        if success:
            logger.info("‚úÖ Configuraci√≥n exitosa")
            sys.exit(0)
        else:
            logger.error("‚ùå Configuraci√≥n fallida")
            sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Error durante la configuraci√≥n: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 