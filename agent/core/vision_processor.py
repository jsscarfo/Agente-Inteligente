#!/usr/bin/env python3
"""
üîç Procesador de Visi√≥n - Extracci√≥n y An√°lisis de Im√°genes

Este m√≥dulo proporciona capacidades avanzadas de procesamiento de im√°genes,
incluyendo extracci√≥n de im√°genes de PDFs, OCR, y an√°lisis visual.
"""

import asyncio
import base64
import io
import json
import logging
import tempfile
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple, Union
from dataclasses import dataclass
from enum import Enum

import aiohttp
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import fitz  # PyMuPDF

# Intentar importar OCR
try:
    import pytesseract
    TESSERACT_AVAILABLE = True
except ImportError:
    TESSERACT_AVAILABLE = False

try:
    import easyocr
    EASYOCR_AVAILABLE = True
except ImportError:
    EASYOCR_AVAILABLE = False

from .config import get_config

logger = logging.getLogger(__name__)


class ImageFormat(Enum):
    """Formatos de imagen soportados"""
    JPEG = "jpeg"
    PNG = "png"
    GIF = "gif"
    BMP = "bmp"
    TIFF = "tiff"
    WEBP = "webp"


@dataclass
class ExtractedImage:
    """Imagen extra√≠da de un documento"""
    id: str
    page_number: int
    image_data: bytes
    format: ImageFormat
    width: int
    height: int
    bbox: Tuple[int, int, int, int]  # x0, y0, x1, y1
    confidence: float = 1.0
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}


@dataclass
class ImageAnalysis:
    """Resultado del an√°lisis de una imagen"""
    image_id: str
    description: Optional[str] = None
    ocr_text: Optional[str] = None
    objects_detected: List[str] = None
    text_blocks: List[Dict[str, Any]] = None
    confidence: float = 0.0
    processing_time: float = 0.0
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.objects_detected is None:
            self.objects_detected = []
        if self.text_blocks is None:
            self.text_blocks = []
        if self.metadata is None:
            self.metadata = {}


class VisionProcessor:
    """
    Procesador de Visi√≥n - Maneja extracci√≥n y an√°lisis de im√°genes
    
    Proporciona capacidades completas para:
    - Extraer im√°genes de PDFs
    - Realizar OCR en im√°genes
    - Analizar contenido visual
    - Procesar m√∫ltiples formatos
    """
    
    def __init__(self):
        self.config = get_config()
        
        # Configuraci√≥n
        self.supported_formats = {
            '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp'
        }
        self.max_image_size = 50 * 1024 * 1024  # 50MB
        self.min_image_size = 100  # 100 bytes
        
        # Inicializar OCR
        self.ocr_engines = self._initialize_ocr_engines()
        
        # Servicios de an√°lisis
        self.analysis_services = {
            'ocr': self._perform_ocr,
            'object_detection': self._detect_objects,
            'text_extraction': self._extract_text_blocks
        }
    
    def _initialize_ocr_engines(self) -> Dict[str, Any]:
        """Inicializar motores de OCR disponibles"""
        engines = {}
        
        # Tesseract OCR
        if TESSERACT_AVAILABLE:
            try:
                # Verificar que Tesseract est√© instalado
                pytesseract.get_tesseract_version()
                engines['tesseract'] = pytesseract
                logger.info("‚úÖ Tesseract OCR disponible")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Tesseract no disponible: {e}")
        
        # EasyOCR
        if EASYOCR_AVAILABLE:
            try:
                engines['easyocr'] = easyocr.Reader(['en', 'es'])
                logger.info("‚úÖ EasyOCR disponible")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è EasyOCR no disponible: {e}")
        
        if not engines:
            logger.warning("‚ö†Ô∏è No hay motores de OCR disponibles")
        
        return engines
    
    async def extract_images_from_pdf(self, pdf_path: Path) -> List[ExtractedImage]:
        """Extraer todas las im√°genes de un PDF"""
        try:
            logger.info(f"üîç Extrayendo im√°genes de: {pdf_path.name}")
            
            # Abrir PDF con PyMuPDF
            doc = fitz.open(pdf_path)
            extracted_images = []
            
            for page_num in range(len(doc)):
                page = doc.load_page(page_num)
                
                # Obtener lista de im√°genes en la p√°gina
                image_list = page.get_images()
                
                for img_index, img in enumerate(image_list):
                    try:
                        # Extraer imagen
                        xref = img[0]
                        pix = fitz.Pixmap(doc, xref)
                        
                        # Convertir a bytes
                        img_data = pix.tobytes("png")
                        
                        # Verificar tama√±o m√≠nimo
                        if len(img_data) < self.min_image_size:
                            continue
                        
                        # Crear objeto de imagen extra√≠da
                        extracted_image = ExtractedImage(
                            id=f"img_{page_num}_{img_index}",
                            page_number=page_num + 1,
                            image_data=img_data,
                            format=ImageFormat.PNG,
                            width=pix.width,
                            height=pix.height,
                            bbox=(0, 0, pix.width, pix.height),
                            metadata={
                                'source_pdf': pdf_path.name,
                                'page_number': page_num + 1,
                                'image_index': img_index,
                                'xref': xref
                            }
                        )
                        
                        extracted_images.append(extracted_image)
                        logger.info(f"‚úÖ Imagen extra√≠da: {extracted_image.id} ({pix.width}x{pix.height})")
                        
                        # Liberar memoria
                        pix = None
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Error extrayendo imagen {img_index} de p√°gina {page_num}: {e}")
                        continue
            
            doc.close()
            
            logger.info(f"üìä Total de im√°genes extra√≠das: {len(extracted_images)}")
            return extracted_images
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo im√°genes del PDF: {e}")
            return []
    
    async def analyze_image(self, image_data: bytes, image_id: str = None) -> ImageAnalysis:
        """Analizar una imagen usando m√∫ltiples servicios"""
        start_time = asyncio.get_event_loop().time()
        
        try:
            if image_id is None:
                image_id = f"img_{hash(image_data) % 10000}"
            
            analysis = ImageAnalysis(image_id=image_id)
            
            # Procesar imagen con todos los servicios disponibles
            tasks = []
            
            # OCR
            if self.ocr_engines:
                tasks.append(self._perform_ocr(image_data))
            
            # Detecci√≥n de objetos
            tasks.append(self._detect_objects(image_data))
            
            # Extracci√≥n de bloques de texto
            tasks.append(self._extract_text_blocks(image_data))
            
            # Ejecutar an√°lisis en paralelo
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Procesar resultados
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.warning(f"‚ö†Ô∏è Error en an√°lisis {i}: {result}")
                    continue
                
                if result:
                    # Combinar resultados en el an√°lisis
                    if hasattr(result, 'ocr_text') and result.ocr_text:
                        analysis.ocr_text = result.ocr_text
                    
                    if hasattr(result, 'objects_detected') and result.objects_detected:
                        analysis.objects_detected.extend(result.objects_detected)
                    
                    if hasattr(result, 'text_blocks') and result.text_blocks:
                        analysis.text_blocks.extend(result.text_blocks)
                    
                    if hasattr(result, 'description') and result.description:
                        analysis.description = result.description
            
            # Calcular tiempo de procesamiento
            analysis.processing_time = asyncio.get_event_loop().time() - start_time
            
            # Calcular confianza general
            analysis.confidence = self._calculate_confidence(analysis)
            
            logger.info(f"‚úÖ An√°lisis completado para {image_id} en {analysis.processing_time:.2f}s")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error analizando imagen {image_id}: {e}")
            return ImageAnalysis(
                image_id=image_id or "unknown",
                confidence=0.0,
                processing_time=asyncio.get_event_loop().time() - start_time
            )
    
    async def _perform_ocr(self, image_data: bytes) -> Optional[ImageAnalysis]:
        """Realizar OCR en la imagen"""
        try:
            # Abrir imagen con Pillow
            image = Image.open(io.BytesIO(image_data))
            
            ocr_results = []
            
            # Probar diferentes motores de OCR
            for engine_name, engine in self.ocr_engines.items():
                try:
                    if engine_name == 'tesseract':
                        # Tesseract OCR
                        text = pytesseract.image_to_string(image, lang='eng+spa')
                        if text.strip():
                            ocr_results.append({
                                'engine': 'tesseract',
                                'text': text.strip(),
                                'confidence': 0.8
                            })
                    
                    elif engine_name == 'easyocr':
                        # EasyOCR
                        results = engine.readtext(np.array(image))
                        text_parts = []
                        for (bbox, text, confidence) in results:
                            text_parts.append(text)
                        
                        if text_parts:
                            ocr_results.append({
                                'engine': 'easyocr',
                                'text': ' '.join(text_parts),
                                'confidence': 0.9
                            })
                
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error con OCR {engine_name}: {e}")
                    continue
            
            if ocr_results:
                # Usar el resultado con mayor confianza
                best_result = max(ocr_results, key=lambda x: x['confidence'])
                
                return ImageAnalysis(
                    image_id="ocr_result",
                    ocr_text=best_result['text'],
                    confidence=best_result['confidence'],
                    metadata={'ocr_engine': best_result['engine']}
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error en OCR: {e}")
            return None
    
    async def _detect_objects(self, image_data: bytes) -> Optional[ImageAnalysis]:
        """Detectar objetos en la imagen"""
        try:
            # Implementaci√≥n b√°sica de detecci√≥n de objetos
            # En una implementaci√≥n real, usar√≠as modelos como YOLO, Faster R-CNN, etc.
            
            # Por ahora, retornar an√°lisis b√°sico
            return ImageAnalysis(
                image_id="object_detection",
                objects_detected=["objeto_detectado"],
                confidence=0.7,
                metadata={'method': 'basic_detection'}
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error en detecci√≥n de objetos: {e}")
            return None
    
    async def _extract_text_blocks(self, image_data: bytes) -> Optional[ImageAnalysis]:
        """Extraer bloques de texto de la imagen"""
        try:
            # Implementaci√≥n b√°sica de extracci√≥n de bloques de texto
            # En una implementaci√≥n real, usar√≠as t√©cnicas de detecci√≥n de texto
            
            return ImageAnalysis(
                image_id="text_blocks",
                text_blocks=[
                    {
                        'text': 'Texto detectado',
                        'bbox': [0, 0, 100, 50],
                        'confidence': 0.8
                    }
                ],
                confidence=0.8,
                metadata={'method': 'basic_extraction'}
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo bloques de texto: {e}")
            return None
    
    def _calculate_confidence(self, analysis: ImageAnalysis) -> float:
        """Calcular confianza general del an√°lisis"""
        confidences = []
        
        if analysis.ocr_text:
            confidences.append(0.8)
        
        if analysis.objects_detected:
            confidences.append(0.7)
        
        if analysis.text_blocks:
            confidences.append(0.8)
        
        if analysis.description:
            confidences.append(0.9)
        
        if confidences:
            return sum(confidences) / len(confidences)
        
        return 0.0
    
    async def process_pdf_with_images(self, pdf_path: Path) -> Dict[str, Any]:
        """Procesar un PDF completo, extrayendo texto e im√°genes"""
        try:
            logger.info(f"üìÑ Procesando PDF completo: {pdf_path.name}")
            
            # Extraer im√°genes
            images = await self.extract_images_from_pdf(pdf_path)
            
            # Analizar cada imagen
            image_analyses = []
            for image in images:
                analysis = await self.analyze_image(image.image_data, image.id)
                image_analyses.append({
                    'image': image,
                    'analysis': analysis
                })
            
            # Generar resumen
            summary = {
                'pdf_path': str(pdf_path),
                'total_images': len(images),
                'images_with_text': len([a for a in image_analyses if a['analysis'].ocr_text]),
                'total_processing_time': sum(a['analysis'].processing_time for a in image_analyses),
                'image_analyses': image_analyses
            }
            
            logger.info(f"‚úÖ PDF procesado: {summary['total_images']} im√°genes, {summary['images_with_text']} con texto")
            return summary
            
        except Exception as e:
            logger.error(f"‚ùå Error procesando PDF: {e}")
            return {
                'pdf_path': str(pdf_path),
                'error': str(e),
                'total_images': 0,
                'image_analyses': []
            }
    
    def save_image_analysis(self, analysis: ImageAnalysis, output_path: Path):
        """Guardar an√°lisis de imagen en formato JSON"""
        try:
            # Convertir a diccionario
            analysis_dict = {
                'image_id': analysis.image_id,
                'description': analysis.description,
                'ocr_text': analysis.ocr_text,
                'objects_detected': analysis.objects_detected,
                'text_blocks': analysis.text_blocks,
                'confidence': analysis.confidence,
                'processing_time': analysis.processing_time,
                'metadata': analysis.metadata
            }
            
            # Guardar en archivo
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(analysis_dict, f, indent=2, ensure_ascii=False)
            
            logger.info(f"‚úÖ An√°lisis guardado en: {output_path}")
            
        except Exception as e:
            logger.error(f"‚ùå Error guardando an√°lisis: {e}")


# Funci√≥n de conveniencia
async def create_vision_processor() -> VisionProcessor:
    """Crear y configurar un procesador de visi√≥n"""
    processor = VisionProcessor()
    return processor 